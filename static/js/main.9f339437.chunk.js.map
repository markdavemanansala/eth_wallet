{"version":3,"sources":["tbplogo.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","account","theBlockchainPunditToken","balance","transactions","transfer","bind","assertThisInitialized","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","Contract","TheBlockchainPunditToken","abi","methods","balanceOf","utils","fromWei","toString","getPastEvents","fromBlock","toBlock","filter","from","transaction","console","log","recipient","amount","send","_this2","react_default","a","createElement","className","href","target","rel","role","style","width","src","logo","alt","onSubmit","event","preventDefault","value","toWei","id","type","ref","input","placeholder","required","scope","map","tx","index","key","returnValues","to","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f339437.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tbplogo.10085af7.png\";","import React, { Component } from 'react';\r\nimport logo from '../tbplogo.png';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport TheBlockchainPunditToken from '../abis/TheBlockchainPunditToken.json';\r\n\r\nclass App extends Component {\r\n\r\n\r\n  async componentWillMount(){\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3(){\r\n    if(window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if(window.web3){\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else{\r\n      window.alert('Non-Ethereum browser detected. Try installing MetaMask')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData(){\r\n    const web3 = window.web3;\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0]});\r\n    const theBlockchainPunditTokenAddress = \"0xdAc199b096BD5702D37498B4e35D7476ffBcEA7b\" // contract address\r\n    const theBlockchainPunditToken = new web3.eth.Contract(TheBlockchainPunditToken.abi, theBlockchainPunditTokenAddress)\r\n    this.setState({ theBlockchainPunditToken })\r\n    const balance = await theBlockchainPunditToken.methods.balanceOf(this.state.account).call();\r\n    this.setState({balance: web3.utils.fromWei(balance.toString(), \"Ether\")});\r\n    const transaction = await theBlockchainPunditToken.getPastEvents('Transfer', {fromBlock: 0, toBlock: 'latest', filter: { from: this.state.account } })\r\n    this.setState({ transactions: transaction })\r\n    console.log(transaction)\r\n  } \r\n\r\n  transfer(recipient, amount) {\r\n    this.state.theBlockchainPunditToken.methods.transfer(recipient, amount).send({from: this.state.account });\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      account: '',\r\n      theBlockchainPunditToken: null,\r\n      balance: 0,\r\n      transactions: []\r\n    };\r\n    this.transfer = this.transfer.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"https://markdavemanansala.github.io/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            The Blockchain Pundit\r\n          </a>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\" style={{width: '500px'}}>\r\n                <a\r\n                  href=\"https://ropsten.etherscan.io/address/0xdac199b096bd5702d37498b4e35d7476ffbcea7b\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                </a>\r\n                <h1>The Blockchain Pundit Token (Ropsten Network)</h1>\r\n                <p>Contract Address: 0xdac199b096bd5702d37498b4e35d7476ffbcea7b</p>\r\n                <h1>{this.state.balance} TBPT</h1>\r\n                <form onSubmit={(event) =>{\r\n                  event.preventDefault()\r\n                  const recipient = this.recipient.value;\r\n                  const amount = window.web3.utils.toWei(this.amount.value, \"Ether\");\r\n                  this.transfer(recipient, amount);\r\n                }}>\r\n                  <div className=\"form-group mr-sm-2\">\r\n                    <input \r\n                      id=\"recipient\"\r\n                      type=\"text\"\r\n                      ref={(input) => {this.recipient = input }}\r\n                      className=\"form-control\"\r\n                      placeholder=\"Recipient Address\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"form-group mr-sm-2\">\r\n                      <input \r\n                        id=\"amount\"\r\n                        type=\"text\"\r\n                        ref={(input) => {this.amount = input }}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Amount\"\r\n                        required\r\n                      />\r\n                    </div>\r\n                  <button type=\"submit\" className=\"btn btn-primary btn-block\">Send</button>\r\n                </form>\r\n\r\n                <table className=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th scope=\"col\">Recipient</th>\r\n                      <th scope=\"col\">Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {this.state.transactions.map((tx, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{tx.returnValues.to}</td>\r\n                        <td>{window.web3.utils.fromWei(tx.returnValues.value.toString(), 'Ether')} TBP</td>\r\n                      </tr>\r\n                    )\r\n                   })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}